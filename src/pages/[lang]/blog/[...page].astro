---
import type { GetStaticPaths, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'

import { Paginator, PostPreview } from '../../../../packages/pure/components/pages'
import { getUniqueTags, sortMDByDate, getBlogCollection } from 'astro-pure/server'
import { Button, Icon } from 'astro-pure/user'
import PageLayout from '@/layouts/BaseLayout.astro'
import config from '@/site-config'

export const prerender = true

const lang: MyBilingualLang = Astro.props?.lang || 'en'; // Default language fallback

export const prod = import.meta.env.PROD

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  //const lang = Astro.props?.lang || 'en'; // Default language fallback
  const supportedLangs: MyBilingualLang[] = ['en', 'es']; // List of supported languages
  const paths = [];

  for (const lang of supportedLangs) {
    // Fetch and sort the blog collections for the current language
    const collections = sortMDByDate(await getBlogCollection(`blog_${lang}`));

    // Extract unique tags and count of collections
    const uniqueTags = getUniqueTags(collections);
    const collectionsCount = collections.length;

    // Generate paginated paths for the current language
    const paginatedPaths = paginate(collections, {
      pageSize: config.content.blogPageSize,
      params: { lang }, // Add `lang` to the params
      props: { uniqueTags, collectionsCount }, // Pass additional props
    });

    // Push the generated paths into the final paths array
    paths.push(...paginatedPaths);
  }

  // Return the array of paths
  return paths;
};




interface Props {
  page: Page<CollectionEntry<'blog_en'>>
  uniqueTags: string[]
  collectionsCount: number,
  lang: MyBilingualLang
}

const { page, uniqueTags, collectionsCount } = Astro.props

const meta = {
  description: 'Some posts or archieves of my blog',
  title: 'Blog'
}

const paginationProps = {
  ...(page.url.prev && {
    prevUrl: {
      text: `← Previous Posts`,
      url: page.url.prev
    }
  }),
  ...(page.url.next && {
    nextUrl: {
      text: `Next Posts →`,
      url: page.url.next
    }
  })
}
---

<PageLayout {meta} lang={lang}>
  <Button title='Back' href='/' style='back' />
  <main class='mt-6 lg:mt-10'>
    <div id='content-header' class='animate'>
      <h1 class='mb-6 mt-6 text-3xl font-medium sm:mt-10'>Blog</h1>
    </div>
    {
      page.data.length === 0 ? (
        <p>No posts yet.</p>
      ) : (
        <div class='grid gap-y-16 sm:grid-cols-[3fr_1fr] sm:gap-x-8'>
          <section aria-label='Blog posts list' class='animate' id='content'>
            {/* header */}
            <div class='mb-3 flex flex-col justify-between text-sm sm:mb-5 sm:flex-row'>
              <span class='text-muted-foreground'>
                Page {page.currentPage} - Showing {page.data.length} of {collectionsCount} posts
              </span>
              <a aria-label='View all blog by years' href='/archives' data-astro-prefetch>
                View all posts by years →
              </a>
            </div>
            {/* posts */}
            <ul class='flex flex-col gap-y-4 text-start'>
              {page.data.map((post) => (
                <PostPreview {post} detailed />
              ))}
            </ul>
            <Paginator {...paginationProps} />
          </section>

          {/* sidebar */}
          {!!uniqueTags.length && (
            <aside class='animate' id='sidebar'>
              <h2 class='mb-4 flex items-center text-lg font-semibold'>
                <Icon name='tag-2' class='me-2' />
                Tags
              </h2>
              <ul class='text-bgColor flex flex-wrap gap-2'>
                {uniqueTags.map((tag) => (
                  <li>
                    <Button title={tag} href={`/tags/${tag}`} style='pill' />
                  </li>
                ))}
              </ul>
              <span class='mt-4 block sm:text-end'>
                <a aria-label='View all blog categories' href='/tags' data-astro-prefetch>
                  View all →
                </a>
              </span>
            </aside>
          )}
        </div>
      )
    }
  </main>
</PageLayout>
